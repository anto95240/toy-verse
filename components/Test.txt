'use client'

import React, { useState, useEffect } from 'react'
import { getSupabaseClient } from '@/utils/supabase/client'
import type { Toy } from '@/types/theme'

interface ToyModalProps {
  toy: Toy | null
  themeId: string
  onClose: () => void
  onSave: (toy: Toy) => void
}

export default function ToyModal({ toy, themeId, onClose, onSave }: ToyModalProps) {
  const supabase = getSupabaseClient()
  const [nom, setNom] = useState(toy?.nom || '')
  const [categorie, setCategorie] = useState(toy?.categorie || '')
  const [nb_pieces, setNbPieces] = useState(toy?.nb_pieces || 0)
  const [is_exposed, setIsExposed] = useState(toy?.is_exposed || false)
  const [is_soon, setIsSoon] = useState(toy?.is_soon || false)
  const [photoFile, setPhotoFile] = useState<File | null>(null)
  const [saving, setSaving] = useState(false)

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setSaving(true)

    let photo_url = toy?.photo_url || null

    if (photoFile) {
      // Upload photo
      const fileExt = photoFile.name.split('.').pop()
      const fileName = `${Date.now()}.${fileExt}`
      const filePath = `toys/${fileName}`

      const { error: uploadError } = await supabase.storage
        .from('toys-images')
        .upload(filePath, photoFile, { upsert: true })

      if (uploadError) {
        alert('Erreur upload image')
        setSaving(false)
        return
      }

      photo_url = filePath
    }

    const toyData = {
      nom,
      categorie,
      nb_pieces,
      is_exposed,
      is_soon,
      photo_url,
      theme_id: themeId,
    }

    if (toy) {
      // Update existing
      const { data, error } = await supabase
        .from('toys')
        .update(toyData)
        .eq('id', toy.id)
        .select()
        .single()

      if (error) {
        alert('Erreur mise à jour')
        setSaving(false)
        return
      }
      onSave(data)
    } else {
      // Create new
      const { data, error } = await supabase
        .from('toys')
        .insert(toyData)
        .select()
        .single()

      if (error) {
        alert('Erreur création')
        setSaving(false)
        return
      }
      onSave(data)
    }

    setSaving(false)
    onClose()
  }

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      onClick={onClose}
    >
      <form
        className="bg-white rounded p-6 max-w-md w-full"
        onClick={e => e.stopPropagation()}
        onSubmit={handleSubmit}
      >
        <h2 className="text-xl font-bold mb-4">{toy ? 'Modifier le jouet' : 'Ajouter un jouet'}</h2>

        <label className="block mb-2">
          Nom :
          <input
            type="text"
            value={nom}
            onChange={e => setNom(e.target.value)}
            required
            className="w-full border border-gray-300 rounded px-2 py-1 mt-1"
          />
        </label>

        <label className="block mb-2">
          Catégorie :
          <input
            type="text"
            value={categorie}
            onChange={e => setCategorie(e.target.value)}
            className="w-full border border-gray-300 rounded px-2 py-1 mt-1"
          />
        </label>

        <label className="block mb-2">
          Nombre de pièces :
          <input
            type="number"
            min={0}
            value={nb_pieces}
            onChange={e => setNbPieces(parseInt(e.target.value))}
            className="w-full border border-gray-300 rounded px-2 py-1 mt-1"
          />
        </label>

        <label className="inline-flex items-center mr-4">
          <input
            type="checkbox"
            checked={is_exposed}
            onChange={e => setIsExposed(e.target.checked)}
            className="mr-1"
          />
          En exposition
        </label>

        <label className="inline-flex items-center">
          <input
            type="checkbox"
            checked={is_soon}
            onChange={e => setIsSoon(e.target.checked)}
            className="mr-1"
          />
          Prochainement
        </label>

        <label className="block mt-4 mb-4">
          Photo (jpg/png) :
          <input
            type="file"
            accept="image/png, image/jpeg"
            onChange={e => setPhotoFile(e.target.files?.[0] || null)}
            className="w-full"
          />
        </label>

        <div className="flex justify-end gap-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border rounded border-gray-400 hover:bg-gray-100"
          >
            Annuler
          </button>
          <button
            type="submit"
            disabled={saving}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
          >
            {saving ? 'Enregistrement...' : 'Enregistrer'}
          </button>
        </div>
      </form>
    </div>
  )
}
